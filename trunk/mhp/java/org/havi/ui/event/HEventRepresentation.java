
package org.havi.ui.event;

/*This class is able to describe the representation of an event generator as a string,color 
or symbol (such as a triangle,'>',for 'play').This allows an application to describe a 
button on an input device correctly for a given platform. The particular text,color,or 
symbol can be determined by calling the getString(),getColor()or getSymbol()methods 
respectively.All available events should return a valid text representation from the 
getString()method. If supported the six colored key events (VK_COLORED_KEY_0 thru 
VK_COLORED_KEY_5 must also be represented by a color,i.e.the getColor()method must return 
a valid java.awt.Color object. Key events may also be represented as a symbol -if the 
platform does not support a symbolic representation for a given event,then the application 
is responsible for rendering the symbol itself.The rendering of keys with a commonly known 
representation should follow the guidelines given here,as de  ned in the following 
table. */


public class HEventRepresentation {

/*
The event representation type for the current event is not supported. The four ER_TYPE integers describe if an input 
mechanism is not supported,or is described by a string,color or symbol. The values of the four ER_TYPE integers are 
required to be bitwise distinct,and the value of ER_TYPE_NOT_SUPPORTED should be 
0. */
public static final int ER_TYPE_NOT_SUPPORTED =0;


/*
The event representation type for the current event is supported as a color. See Also: 
ER_TYPE_NOT_SUPPORTED */
public static final int ER_TYPE_COLOR = 2;


/*
The event representation type for the current event is supported as a string. */
public static final int ER_TYPE_STRING = 1;


/*
The event representation type for the current event is supported as a symbol. */
public static final int ER_TYPE_SYMBOL = 4;

private int type;
private java.awt.Color color;
private String string;
private java.awt.Image image;


/*
It is not intended that applications should directly construct HEventRepresentation objects. Creates an 
HEventRepresentation object.See the class description for details of constructor parameters and default values. This 
method is protected to allow the platform to override it in a different package 
scope. */
protected HEventRepresentation() {
   type = ER_TYPE_NOT_SUPPORTED;
   color=null;
   string=null;
   image=null;
}


//convenience constructor for internal use
protected HEventRepresentation(java.awt.Color   aColor,
                               java.lang.String aText,
                               java.awt.Image   aSymbol) {
   color=aColor;
   string=aText;
   image=aSymbol;
   type=ER_TYPE_NOT_SUPPORTED;
   if (color != null)
      type |= ER_TYPE_COLOR;
   if (string != null)
      type |= ER_TYPE_STRING;
   if (image != null)
      type |= ER_TYPE_SYMBOL;
}

/*
This returns the color representation (generally used for colored soft keys)of the current event code. Returns: The 
color representation of the current event code,or null if not available. */
public java.awt.Color getColor() {
   return color;
}

/*
Returns the text representation of the current event code. Returns: The text representation of the current event code,or 
null if not available. */
public java.lang.String getString() {
   return string;
}

/*
This returns an image-based representation (generally used for symbolic keys)of the current event 
code. Note that it is platform speci  c whether this method will return a valid Image,
in particular it is a valid implementation option to always return null.
Note that for non-null Images,the size and other Image characteristics are dependent 
on particular manufacturer implementation. Returns: The symbolic representation of the 
current event code,or null if not available.*/
public java.awt.Image getSymbol() {
   return image;
}

/*
This returns the type of representation(s)available for the event code which this instance of HEventRepresentation 
represents. If the event code can be represented in multiple ways,then the returned type will be the sum of the 
supported types,e.g.an event generated by a key with a particular font representation of an "A"in yellow might return 
ER_TYPE_STRING +ER_TYPE_COLOR +ER_TYPE_SYMBOL.Where the string representation is "A",the color representation is 
"yellow"and the symbol representation might be a likeness of the "A glyph"from a particular 
font. */
public int getType() {
   return type;
}

/*
This method returns true if the current event is supported by the platform. */
public boolean isSupported() {
   return (type != ER_TYPE_NOT_SUPPORTED);
}

/*
Sets the Color representation for this HEventRepresentation .Any previous value is overwritten. This method is protected 
to allow the platform to override it in subclasses of HEventRepresentation. It is not intended for use by the 
application and conformant applications shall not use this method. Parameters: aColor --the color to be associated with 
this event. */
protected void setColor(java.awt.Color aColor) {
   color=aColor;
}

/*
Sets the string representation for this HEventRepresentation .Any previous value is overwritten. This method is 
protected to allow the platform to override it in subclasses of HEventRepresentation. It is not intended for use by the 
application and conformant applications shall not use this method. Parameters: aText --the text string to be associated 
with this event. */
protected void setString(java.lang.String aText) {
   string=aText;
}

/*
Sets the symbolic representation for this HEventRepresentation .Any previous value is overwritten. This method is 
protected to allow the platform to override it in subclasses of HEventRepresentation. It is not intended for use by the 
application and conformant applications shall not use this method. */
protected void setSymbol(java.awt.Image aSymbol) {
   image=aSymbol;
}

/*
Sets the type of representation(s)available for the event code which this this instance of HEventRepresentation 
represents.If no representation(s)are available then aType should be set to ER_TYPE_NOT_SUPPORTED.Otherwise the 
representation should be set to the sum of one or more of the following:ER_TYPE_STRING,ER_TYPE_COLOR,ER_TYPE_SYMBOL. For 
example,if both string and color representations are available then the system should call this method with the 
parameter set to ER_TYPE_STRING + ER_TYPE_COLOR This method is protected to allow the platform to override it in 
subclasses of HEventRepresentation. It is not intended for use by the application and conformant applications shall not 
use this method. Parameters: aType -the type of representation(s)available for this 
event */
protected void setType(int aType) {
   type=aType;
}


}
