diff -U 2 -r ../VDR/libdtv/libsi/include/libsi.h libdtv/libsi/include/libsi.h
--- ../VDR/libdtv/libsi/include/libsi.h	Sun May 11 17:08:30 2003
+++ libdtv/libsi/include/libsi.h	Mon Jun  9 22:49:10 2003
@@ -85,4 +85,5 @@
 #define TID_RST               0x71           /* Running Status Section */
 #define TID_ST                0x72           /* Stuffing Section */
+#define TID_AIT               0x74           /* Application Information Table */
                            /* 0xFF */        /* Reserved for future use */
 
@@ -108,4 +109,8 @@
 #define DESCR_STD                            0x11
 #define DESCR_IBP                            0x12
+
+ /* defined by ISO-13818-6 (DSM-CC) */
+
+#define DESCR_CAROUSEL_IDENTIFIER            0x13
                                           /* 0x13 - 0x3F */ /* Reserved */
 
@@ -160,4 +165,24 @@
 #define DESCR_ANNOUNCEMENT_SUPPORT           0x6E
 
+/* Defined by ETSI TS 102 812 (MHP) */
+#define DESCR_APPLICATION_SIGNALLING         0x6F
+ /* They once again start with 0x00 (see page 234) */
+#define DESCR_MHP_APPLICATION                0x00
+#define DESCR_MHP_APPLICATION_NAME           0x01
+#define DESCR_MHP_TRANSPORT_PROTOCOL         0x02
+#define DESCR_MHP_DVBJ_APPLICATION           0x03
+#define DESCR_MHP_DVBJ_APPLICATION_LOCATION  0x04
+  /* 0x05 - 0x0A is unimplemented this library */
+#define DESCR_MHP_EXTERNAL_APPLICATION_AUTHORISATION 0x05
+#define DESCR_MHP_IPV4_ROUTING               0x06
+#define DESCR_MHP_IPV6_ROUTING               0x07
+#define DESCR_MHP_DVBHTML_APPLICATION        0x08
+#define DESCR_MHP_DVBHTML_APPLICATION_LOCATION       0x09
+#define DESCR_MHP_DVBHTML_APPLICATION_BOUNDARY       0x0A
+#define DESCR_MHP_APPLICATION_ICONS          0x0B
+#define DESCR_MHP_PREFETCH                   0x0C
+#define DESCR_MHP_DELEGATED_APPLICATION      0x0E
+#define DESCR_MHP_APPLICATION_STORAGE        0x10
+
 
 #define MAX_SECTION_BUFFER 4096
@@ -327,4 +352,44 @@
    } while (0)
 
+   
+   
+/* ApplicationInfo structure (used to store MHP application information) */
+   
+struct ApplicationInfo {
+   struct NODE          Node;
+   int                  ApplicationType;
+   int                  AitVersion;
+   struct LIST         *Descriptors;
+   struct LIST         *Applications;
+};
+   
+  #define CreateApplicationInfo(ai, type, version) \
+   do { \
+      xCreateNode (ai, NULL); \
+      (ai)->ApplicationType = type; \
+      (ai)->AitVersion = version; \
+      (ai)->Descriptors = xNewList(NULL); \
+      (ai)->Applications = xNewList(NULL); \
+   } while(0)
+   
+/* Application structure (AIT loop member) */
+
+struct Application {
+   struct NODE          Node;
+   long                 OrganisationID;
+   int                  ApplicationID;
+   int                  ControlCode;
+   struct LIST         *Descriptors;
+};
+   
+#define CreateApplication(ap, oid, aid, cc) \
+   do { \
+      xCreateNode (ap, NULL); \
+      (ap)->OrganisationID = oid; \
+      (ap)->ApplicationID = aid; \
+      (ap)->ControlCode = cc; \
+      (ap)->Descriptors = xNewList(NULL); \
+   } while(0)
+
 
 #define STREAMTYPE_11172_VIDEO                   1
@@ -1206,4 +1271,302 @@
 
 
+/* ApplicationSignallingDescriptor */
+
+struct ApplicationSignallingDescriptor {
+   struct NODE          Node;     
+   unsigned short       Tag;
+   struct LIST         *ApplicationList;
+};
+
+#define CreateApplicationSignallingDescriptor(descr) \
+   do \
+   { \
+      xCreateNode (((struct ApplicationSignallingDescriptor *)descr), NULL); \
+      ((struct ApplicationSignallingDescriptor *)descr)->Tag = DESCR_APPLICATION_SIGNALLING; \
+      ((struct ApplicationSignallingDescriptor *)descr)->ApplicationList = xNewList(NULL); \
+   } while (0)
+
+struct ApplicationSignallingEntry {
+   struct NODE          Node;     
+   int                  Type;
+   int                  VersionNumber;
+};
+
+#define CreateApplicationSignallingEntry(newent, type, version) \
+   do \
+   { \
+      xCreateNode (newent, NULL); \
+      newent->Type = type; \
+      newent->VersionNumber = version; \
+   } while (0)
+
+#define AddApplicationSignallingEntry(descr, type, version) \
+   do \
+   { \
+      struct ApplicationSignallingEntry *newent; \
+      \
+      xCreateNode (newent, NULL); \
+      newent->Type = type; \
+      newent->VersionNumber = version; \
+      xAddTail (((struct ApplicationSignallingDescriptor *)descr)->ApplicationList, newent); \
+   } while (0)
+
+/* Carousel Identifier Descriptor */
+
+struct CarouselIdentifierDescriptor {
+   struct NODE          Node;     
+   unsigned short       Tag;
+   int                  CarouselID;
+};
+
+#define CreateCarouselIdentifierDescriptor(descr, id) \
+   do \
+   { \
+      xCreateNode (((struct CarouselIdentifierDescriptor *)descr), NULL); \
+      ((struct CarouselIdentifierDescriptor *)descr)->Tag = DESCR_CAROUSEL_IDENTIFIER; \
+      ((struct CarouselIdentifierDescriptor *)descr)->CarouselID = id; \
+   } while (0)
+   
+/* Application Descriptor */
+
+struct ApplicationDescriptor {
+   struct NODE          Node;     
+   unsigned short       Tag;
+   struct LIST         *ApplicationProfiles;
+   char                 Visibility;
+   char                 ServiceBound;
+   int                  Priority;
+   struct LIST         *TransportProtocols;
+};
+
+#define CreateApplicationDescriptor(descr, visi, serviceB, prio) \
+   do \
+   { \
+      xCreateNode (((struct ApplicationDescriptor *)descr), NULL); \
+      ((struct ApplicationDescriptor *)descr)->Tag = DESCR_MHP_APPLICATION; \
+      ((struct ApplicationDescriptor *)descr)->ApplicationProfiles = xNewList(NULL); \
+      ((struct ApplicationDescriptor *)descr)->Visibility = visi; \
+      ((struct ApplicationDescriptor *)descr)->ServiceBound = serviceB; \
+      ((struct ApplicationDescriptor *)descr)->Priority = prio; \
+      ((struct ApplicationDescriptor *)descr)->TransportProtocols = xNewList(NULL); \
+   } while (0)
+   
+   
+struct ApplicationProfileEntry {
+   struct NODE          Node;
+   int                  Profile;
+   unsigned short       VersionMajor;
+   unsigned short       VersionMinor;
+   unsigned short       VersionMicro;
+};
+   
+#define CreateApplicationProfileEntry(newent, prof, major, minor, micro) \
+   do \
+   { \
+      xCreateNode (newent, NULL); \
+      newent->Profile = prof; \
+      newent->VersionMajor = major; \
+      newent->VersionMinor = minor; \
+      newent->VersionMicro = micro; \
+   } while (0)
+
+#define AddApplicationProfileEntry(descr, prof, major, minor, micro) \
+   do \
+   { \
+      struct ApplicationProfileEntry *newent; \
+      \
+      xCreateNode (newent, NULL); \
+      newent->Profile = prof; \
+      newent->VersionMajor = major; \
+      newent->VersionMinor = minor; \
+      newent->VersionMicro = micro; \
+      xAddTail (((struct ApplicationDescriptor *)descr)->ApplicationProfiles, newent); \
+   } while (0)
+   
+struct TransportProtocolLabelEntry {
+   struct NODE          Node;
+   int                  TransportProtocolLabel;
+};
+ #define CreateTransportProtocolLabel(newent, label) \
+   do \
+   { \
+      xCreateNode (newent, NULL); \
+      newent->Label = label; \
+   } while (0)
+
+#define AddTransportProtocolLabel(descr, label) \
+   do \
+   { \
+      struct TransportProtocolLabelEntry *newent; \
+      \
+      xCreateNode (newent, NULL); \
+      newent->TransportProtocolLabel = label; \
+      xAddTail (((struct ApplicationDescriptor *)descr)->TransportProtocols, newent); \
+   } while (0)
+   
+/* Application Name Descriptor */
+
+struct ApplicationNameDescriptor {
+   struct NODE          Node;     
+   unsigned short       Tag;
+   struct LIST         *ApplicationNames;
+};
+
+#define CreateApplicationNameDescriptor(descr) \
+   do \
+   { \
+      xCreateNode (((struct ApplicationNameDescriptor *)descr), NULL); \
+      ((struct ApplicationNameDescriptor *)descr)->Tag = DESCR_MHP_APPLICATION_NAME; \
+      ((struct ApplicationNameDescriptor *)descr)->ApplicationNames = xNewList(NULL); \
+   } while (0)
+
+struct ApplicationName {
+   struct NODE          Node;    //Node enthält den Text 
+   char LanguageCode[4];
+};
+   
+#define CreateApplicationName(newent, lc1, lc2, lc3, txt) \
+   do \
+   { \
+      xCreateNode (newent, NULL); \
+      ((struct NODE *)newent)->Name = txt; \
+      ((struct NODE *)newent)->HashKey = xHashKey (txt); \
+      ((struct ApplicationName *)newent)->LanguageCode[0] = lc1; \
+      ((struct ApplicationName *)newent)->LanguageCode[1] = lc2; \
+      ((struct ApplicationName *)newent)->LanguageCode[2] = lc3; \
+      ((struct ApplicationName *)newent)->LanguageCode[3] = '\0'; \
+   } while (0)
+
+#define AddApplicationName(descr, lc1, lc2, lc3, txt) \
+   do \
+   { \
+      struct ApplicationName *newent; \
+      \
+      xCreateNode (newent, NULL); \
+      ((struct NODE *)newent)->Name = txt; \
+      ((struct NODE *)newent)->HashKey = xHashKey (txt); \
+      newent->LanguageCode[0] = lc1; \
+      newent->LanguageCode[1] = lc2; \
+      newent->LanguageCode[2] = lc3; \
+      newent->LanguageCode[3] = '\0'; \
+      xAddTail (((struct ApplicationNameDescriptor *)descr)->ApplicationNames, newent); \
+   } while (0)
+   
+/* Transport Protocol Descriptor */
+
+struct TransportViaOC {
+   int                  Remote;
+   //if remote, these IDs have a meaning, if not, they shall be -1
+   int                  OriginalNetworkID;
+   int                  TransportStreamID;
+   int                  ServiceID;
+   int                  ComponentTag;
+};
+   
+struct TransportProtocolDescriptor {
+   struct NODE          Node;     
+   unsigned short       Tag;
+   int                  ProtocolID;
+   int                  TransportProtocolLabel;
+   union {
+      struct TransportViaOC    OC; 
+      //Transport via IP or return channel might be added
+   }                    Selector;
+};
+
+#define CreateTransportProtocolDescriptor(descr, protID, trProLabel) \
+   do \
+   { \
+      xCreateNode (((struct TransportProtocolDescriptor *)descr), NULL); \
+      ((struct TransportProtocolDescriptor *)descr)->Tag = DESCR_MHP_TRANSPORT_PROTOCOL; \
+      ((struct TransportProtocolDescriptor *)descr)->ProtocolID = protID; \
+      ((struct TransportProtocolDescriptor *)descr)->TransportProtocolLabel = trProLabel; \
+   } while (0)
+
+/* DVB-J Application Descriptor */
+
+struct DVBJApplicationDescriptor {
+   struct NODE          Node;
+   unsigned short       Tag;
+   struct LIST         *Parameters;    
+};
+
+#define CreateDVBJApplicationDescriptor(descr) \
+   do \
+   { \
+      xCreateNode (((struct DVBJApplicationDescriptor *)descr), NULL); \
+      ((struct DVBJApplicationDescriptor *)descr)->Tag = DESCR_MHP_DVBJ_APPLICATION; \
+      ((struct DVBJApplicationDescriptor *)descr)->Parameters = xNewList(NULL); \
+   } while (0)
+   
+struct DVBJApplicationParameter {
+   struct NODE          Node;  //Node contains the text
+};
+   
+#define CreateApplicationParameter(newent, txt) \
+   do \
+   { \
+      xCreateNode (newent, NULL); \
+      ((struct NODE *)newent)->Name = txt; \
+      ((struct NODE *)newent)->HashKey = xHashKey (txt); \
+   } while (0)
+
+#define AddApplicationParameter(descr, txt) \
+   do \
+   { \
+      struct DVBJApplicationParameter *newent; \
+      \
+      xCreateNode (newent, NULL); \
+      ((struct NODE *)newent)->Name = txt; \
+      ((struct NODE *)newent)->HashKey = xHashKey (txt); \
+      xAddTail (((struct DVBJApplicationDescriptor *)descr)->Parameters, newent); \
+   } while (0)
+      
+/* DVB-J Application Location Descriptor */
+
+struct DVBJApplicationLocationDescriptor {
+   struct NODE          Node;
+   unsigned short       Tag;
+   //Exactly three entries: 1) BaseDirectory 2) ClassPath 3) InitialClass
+   struct LIST          *Paths;
+};
+
+#define CreateDVBJApplicationLocationDescriptor(descr) \
+   do \
+   { \
+      xCreateNode (((struct DVBJApplicationLocationDescriptor *)descr), NULL); \
+      ((struct DVBJApplicationLocationDescriptor *)descr)->Tag = DESCR_MHP_DVBJ_APPLICATION_LOCATION; \
+      ((struct DVBJApplicationLocationDescriptor *)descr)->Paths = xNewList(NULL); \
+   } while (0)
+   
+#define AddApplicationLocationPath(descr, txt) \
+   do \
+   { \
+      struct DVBJApplicationParameter *newent; \
+      \
+      xCreateNode (newent, NULL); \
+      ((struct NODE *)newent)->Name = txt; \
+      ((struct NODE *)newent)->HashKey = xHashKey (txt); \
+      xAddTail (((struct DVBJApplicationLocationDescriptor *)descr)->Paths, newent); \
+   } while (0)
+
+
+ /* Application Icons Descriptor */
+
+struct ApplicationIconsDescriptor {
+   struct NODE          Node;
+   unsigned short       Tag;
+   int                  IconFlags;
+};
+
+#define CreateApplicationIconsDescriptor(descr, flags, txt) \
+   do \
+   { \
+      xCreateNode (((struct ApplicationIconsDescriptor *)descr), NULL); \
+      ((struct NODE *)descr)->Name = txt; \
+      ((struct NODE *)descr)->HashKey = xHashKey (txt); \
+      ((struct ApplicationIconsDescriptor *)descr)->Tag = DESCR_MHP_APPLICATION_ICONS; \
+      ((struct ApplicationIconsDescriptor *)descr)->IconFlags = flags; \
+   } while (0)
 
 /* Prototypes */
@@ -1223,6 +1586,8 @@
 time_t siParseTDT (u_char *);
 struct Tot *siParseTOT (u_char *);
+struct LIST *siParseAIT (u_char *);
 void siParseDescriptors (struct LIST *, u_char *, int, u_char);
 void siParseDescriptor (struct LIST *, u_char *);
+void mhpParseDescriptor (struct LIST *, u_char *);
 char *siGetDescriptorText (u_char *, int);
 char *siGetDescriptorName (u_char *, int);
diff -U 2 -r ../VDR/libdtv/libsi/include/si_tables.h libdtv/libsi/include/si_tables.h
--- ../VDR/libdtv/libsi/include/si_tables.h	Sun May 11 17:01:55 2003
+++ libdtv/libsi/include/si_tables.h	Wed Aug  6 17:15:42 2003
@@ -590,4 +590,95 @@
  */
     /* TO BE DONE */
+    
+/*
+ *
+ *    3) Application Information Table (AIT):
+ * 
+ *       - the AIT contains data concerning MHP application broadcast by a service.
+ *
+ */
+
+#define AIT_LEN 10
+
+typedef struct {
+   u_char table_id                               :8;
+#if BYTE_ORDER == BIG_ENDIAN
+   u_char section_syntax_indicator               :1;
+   u_char                                        :3;
+   u_char section_length_hi                      :4;
+#else
+   u_char section_length_hi                      :4;
+   u_char                                        :3;
+   u_char section_syntax_indicator               :1;
+#endif
+   u_char section_length_lo                      :8;
+   u_char application_type_hi                    :8;
+   u_char application_type_lo                    :8;
+#if BYTE_ORDER == BIG_ENDIAN
+   u_char                                        :2;
+   u_char version_number                         :5;
+   u_char current_next_indicator                 :1;
+#else
+   u_char current_next_indicator                 :1;
+   u_char version_number                         :5;
+   u_char                                        :2;
+#endif
+   u_char section_number                         :8;
+   u_char last_section_number                    :8;
+#if BYTE_ORDER == BIG_ENDIAN
+   u_char                                        :4;
+   u_char common_descriptors_length_hi           :4;
+#else
+   u_char common_descriptors_length_hi           :4;
+   u_char                                        :4;
+#endif
+   u_char common_descriptors_length_lo           :8;
+} ait_t;
+
+#define SIZE_AIT_MID 2
+
+typedef struct {                                 // after descriptors 
+#if BYTE_ORDER == BIG_ENDIAN
+   u_char                                        :4; 
+   u_char application_loop_length_hi             :4; 
+#else
+   u_char application_loop_length_hi             :4; 
+   u_char                                        :4; 
+#endif
+   u_char application_loop_length_lo             :8; 
+} ait_mid_t; 
+ 
+#define SIZE_NIT_END 4 
+
+struct ait_end_struct { 
+   long CRC; 
+}; 
+
+#define AIT_APP_LEN 9
+
+typedef struct { 
+   //how to deal with 32 bit fields?
+
+   u_char organisation_id_hi_hi                  :8; 
+   u_char organisation_id_hi_lo                  :8; 
+   u_char organisation_id_lo_hi                  :8; 
+   u_char organisation_id_lo_lo                  :8; 
+
+   //long organisation_id                          :32;
+   u_char application_id_hi                      :8;
+   u_char application_id_lo                      :8;
+   u_char application_control_code               :8;
+#if BYTE_ORDER == BIG_ENDIAN
+   u_char                                        :4; 
+   u_char application_descriptors_length_hi      :4; 
+#else  
+   u_char application_descriptors_length_hi      :4; 
+   u_char                                        :4; 
+#endif
+   u_char application_descriptors_length_lo      :8; 
+   /* descriptors  */
+} ait_app_t;
+
+
 /*
  *
@@ -652,4 +743,20 @@
 
 
+/* 0x13 carousel_identifier_descriptor */
+
+#define DESCR_CAROUSEL_IDENTIFIER_LEN 7
+typedef struct descr_carousel_identifier_struct {
+   u_char descriptor_tag                         :8;
+   u_char descriptor_length                      :8;
+   u_char carousel_id_hi_hi                      :8;
+   u_char carousel_id_hi_lo                      :8;
+   u_char carousel_id_lo_hi                      :8;
+   u_char carousel_id_lo_lo                      :8;
+   u_char FormatId                               :8;
+   /* FormatSpecifier follows */
+} descr_carousel_identifier_t;
+#define CastCarouselIdentifierDescriptor(x) ((descr_carousel_identifier_t *)(x))
+
+
 /* 0x40 network_name_descriptor */
 
@@ -1401,3 +1508,193 @@
 #define CastAnnouncementSupportDescriptor(x) ((descr_announcement_support_t *)(x))
 
+
+/* 0x6F application_signalling_descriptor */
+
+#define DESCR_APPLICATION_SIGNALLING_LEN 2
+typedef struct descr_application_signalling_struct {
+   u_char descriptor_tag                         :8;
+   u_char descriptor_length                      :8;
+} descr_application_signalling_t;
+#define CastApplicationSignallingDescriptor(x) ((descr_application_signalling_t *)(x))
+
+#define APPLICATION_SIGNALLING_ENTRY_LEN 3
+typedef struct application_signalling_entry_struct {
+   u_char application_type_hi                    :8;   
+   u_char application_type_lo                    :8;   
+#if BYTE_ORDER == BIG_ENDIAN
+   u_char                                        :3; 
+   u_char AIT_version_number                     :5;
+#else
+   u_char AIT_version_number                     :5;
+   u_char                                        :3; 
+#endif
+} application_signalling_entry_t;
+#define CastApplicationSignallingEntry(x) ((application_signalling_entry_t *)(x))
+
+/* MHP 0x00 application_descriptor */
+
+#define DESCR_APPLICATION_LEN 3
+
+typedef struct descr_application_struct {
+   u_char descriptor_tag                         :8;
+   u_char descriptor_length                      :8;
+   u_char application_profiles_length            :8;
+} descr_application_t;
+#define CastApplicationDescriptor(x) ((descr_application_t *)(x))
+
+#define DESCR_APPLICATION_END_LEN 2
+
+typedef struct descr_application_end_struct {
+#if BYTE_ORDER == BIG_ENDIAN
+   u_char service_bound_flag                     :1;
+   u_char visibility                             :2;
+   u_char                                        :5;
+#else
+   u_char                                        :5;
+   u_char visibility                             :2;
+   u_char service_bound_flag                     :1;
+#endif
+   u_char application_priority                   :8;
+/*now follow 8bit transport_protocol_label fields to the end */
+} descr_application_end_t;
+#define CastApplicationDescriptorEnd(x) ((descr_application_end_t *)(x))
+
+#define APPLICATION_PROFILE_ENTRY_LEN 5
+
+typedef struct application_profile_entry_struct {
+   u_char application_profile_hi                 :8;   
+   u_char application_profile_lo                 :8;   
+   u_char version_major                          :8;   
+   u_char version_minor                          :8;   
+   u_char version_micro                          :8;   
+} application_profile_entry_t;
+#define CastApplicationProfileEntry(x) ((application_profile_entry_t *)(x))
+
+/* MHP 0x01 application_name_desriptor */
+
+#define DESCR_APPLICATION_NAME_LEN 2
+
+typedef struct descr_application_name_struct {
+   u_char descriptor_tag                         :8;
+   u_char descriptor_length                      :8;
+} descr_application_name_t;
+#define CastApplicationNameDescriptor(x) ((descr_application_name_t *)(x))
+
+#define APPLICATION_NAME_ENTRY_LEN 4
+
+typedef struct descr_application_name_entry_struct {
+   u_char lang_code1                             :8;
+   u_char lang_code2                             :8;
+   u_char lang_code3                             :8;
+   u_char application_name_length                :8;
+   /* application name string */
+} descr_application_name_entry_t;
+#define CastApplicationNameDescriptorEntry(x) ((descr_application_name_entry_t *)(x))
+
+/* MHP 0x02 transport_protocol_descriptor */
+
+#define DESCR_TRANSPORT_PROTOCOL_LEN 5
+
+typedef struct descr_transport_protocol_struct {
+   u_char descriptor_tag                         :8;
+   u_char descriptor_length                      :8;
+   u_char protocol_id_hi                         :8;   
+   u_char protocol_id_lo                         :8;   
+   u_char transport_protocol_label               :8; 
+   /* protocol_id-specific selector bytes follow */  
+} descr_transport_protocol_t;
+#define CastTransportProtocolDescriptor(x) ((descr_transport_protocol_t *)(x))
+
+#define TRANSPORT_VIA_OC_LEN 1
+
+typedef struct transport_via_oc_struct {
+#if BYTE_ORDER == BIG_ENDIAN
+   u_char remote                                 :1;
+   u_char                                        :7;
+#else
+   u_char                                        :7;
+   u_char remote                                 :1;
+#endif
+} transport_via_oc_t;
+#define CastTransportViaOC(x) ((transport_via_oc_t *)(x))
+
+//if remote is true, transport_via_oc_remote_end_t follows,
+// else transport_via_oc_end_t.
+
+#define TRANSPORT_VIA_OC_REMOTE_END_LEN 7
+
+typedef struct transport_via_oc_remote_end_struct {
+   u_char original_network_id_hi                 :8;
+   u_char original_network_id_lo                 :8;
+   u_char transport_stream_id_hi                 :8;
+   u_char transport_stream_id_lo                 :8;
+   u_char service_id_hi                          :8;
+   u_char service_id_lo                          :8;
+   u_char component_tag                          :8;
+} transport_via_oc_remote_end_t;
+#define CastTransportViaOCRemoteEnd(x) ((transport_via_oc_remote_end_t *)(x))
+
+#define TRANSPORT_VIA_OC_END_LEN 1
+
+typedef struct transport_via_oc_end_struct {
+   u_char component_tag                          :8;
+} transport_via_oc_end_t;
+#define CastTransportViaOCEnd(x) ((transport_via_oc_end_t *)(x))
+
+/* 0x03 dvb_j_application_descriptor() */
+
+#define DESCR_DVBJ_APPLICATION_LEN 2
+
+typedef struct descr_dvbj_application_struct {
+   u_char descriptor_tag                         :8;
+   u_char descriptor_length                      :8;
+} descr_dvbj_application_t;
+#define CastDVBJApplicationDescriptor(x) ((descr_dvbj_application_t *)(x))
+
+#define DESCR_DVBJ_APPLICATION_ENTRY_LEN 1
+
+typedef struct descr_dvbj_application_entry_struct {
+   u_char parameter_length                       :8;
+   /* parameter string */
+} descr_dvbj_application_entry_t;
+#define CastDVBJApplicationDescriptorEntry(x) ((descr_dvbj_application_entry_t *)(x))
+
+/* 0x04 dvb_j_application_location_descriptor */
+
+#define DESCR_DVBJ_APPLICATION_LOCATION_LEN 3
+
+typedef struct descr_dvbj_application_location_struct {
+   u_char descriptor_tag                         :8;
+   u_char descriptor_length                      :8;
+   u_char base_directory_length                  :8;
+   /* base directory string */
+} descr_dvbj_application_location_t;
+#define CastDVBJApplicationLocationDescriptor(x) ((descr_dvbj_application_location_t *)(x))
+
+#define DESCR_DVBJ_APPLICATION_LOCATION_MID_LEN 1
+
+typedef struct descr_dvbj_application_location_mid_struct {
+   u_char classpath_extension_length                  :8;
+} descr_dvbj_application_location_mid_t;
+#define CastDVBJApplicationLocationDescriptorMid(x) ((descr_dvbj_application_location_mid_t *)(x))
+
+/* 0x0B application_icons_descriptor */
+
+#define DESCR_APPLICATION_ICONS_LEN 3
+
+typedef struct descr_application_icons_descriptor_struct {
+   u_char descriptor_tag                         :8;
+   u_char descriptor_length                      :8;
+   u_char icon_locator_length                    :8;
+   /* icon locator */
+} descr_application_icons_descriptor_t; 
+#define CastApplicationIconsDescriptor(x) ((descr_application_icons_descriptor_t *)(x))
+
+#define DESCR_APPLICATION_ICONS_END_LEN 2
+
+typedef struct descr_application_icons_descriptor_end_struct {
+   u_char icon_flags_hi                          :8;
+   u_char icon_flags_lo                          :8;
+} descr_application_icons_descriptor_end_t; 
+#define CastApplicationIconsDescriptorEnd(x) ((descr_application_icons_descriptor_end_t *)(x))
 
diff -U 2 -r ../VDR/libdtv/libsi/si_parser.c libdtv/libsi/si_parser.c
--- ../VDR/libdtv/libsi/si_parser.c	Sun May 11 17:06:57 2003
+++ libdtv/libsi/si_parser.c	Wed Aug  6 17:21:59 2003
@@ -503,4 +503,73 @@
 }
 
+struct LIST *siParseAIT (u_char *Buffer)
+{
+   ait_t               *Ait;
+   ait_mid_t           *AitMid;
+   ait_app_t           *AppDesc;
+   u_char              *Ptr;
+   int                  SectionLength, LoopLength, Loop2Length;
+   int                  AitVersion;
+   int                  ApplicationType;
+   struct LIST         *AppInfos = NULL;
+   struct ApplicationInfo   *AppInfo;
+   struct LIST         *Apps = NULL;
+   struct Application  *App;
+
+   if (!Buffer) return NULL;
+
+   Ait = (ait_t *) Buffer;
+   Ptr = Buffer;
+   
+   if (Ait->table_id != TID_AIT) {
+      return NULL;
+   }
+   
+   SectionLength = HILO (Ait->section_length) + 3 - AIT_LEN - 4;
+
+   if (crc32 (Ptr, HILO (Ait->section_length) + 3)) return (NULL);
+
+   AitVersion = Ait->version_number;
+   ApplicationType = HILO(Ait->application_type);
+   
+   CreateApplicationInfo (AppInfo, ApplicationType, AitVersion);
+   AppInfos = xNewList (NULL);
+   xAddTail (AppInfos, AppInfo);
+   
+   Ptr += AIT_LEN;
+   
+   LoopLength= HILO(Ait->common_descriptors_length);
+   //if (LoopLength > SectionLength - SDT_DESCR_LEN)
+     // return (Networks);
+   
+   if (LoopLength <= SectionLength) {
+      if (SectionLength >= 0) siParseDescriptors (AppInfo->Descriptors, Ptr, LoopLength, Ait->table_id);
+      SectionLength -= LoopLength;
+      Ptr += LoopLength;
+      AitMid = (ait_mid_t *) Ptr; 
+      LoopLength = HILO (AitMid->application_loop_length);
+      if ((SectionLength > 0) && (LoopLength <= SectionLength)) {
+         SectionLength -= SIZE_AIT_MID;
+         Ptr += SIZE_AIT_MID;
+         while (LoopLength > 0) {
+            AppDesc = (ait_app_t *) Ptr;
+            CreateApplication(App, (HILO(AppDesc->organisation_id_hi) << 16 ) | (HILO(AppDesc->organisation_id_lo)),
+                              HILO(AppDesc->application_id), AppDesc->application_control_code);
+            Loop2Length = HILO (AppDesc->application_descriptors_length);
+            Ptr += AIT_APP_LEN;
+            if (Loop2Length <= LoopLength) {
+               if (LoopLength >= 0) siParseDescriptors (App->Descriptors, Ptr, Loop2Length, Ait->table_id);
+            }
+            xAddTail (AppInfo->Applications, App);
+            LoopLength -= Loop2Length + AIT_APP_LEN;
+            SectionLength -= Loop2Length + AIT_APP_LEN;
+            Ptr += Loop2Length;
+         }
+      }
+   }
+
+   return (AppInfos);
+}   
+
 static u_char TempTableID = 0;
 
@@ -678,4 +747,6 @@
                case DESCR_COPYRIGHT:
                case DESCR_MAXIMUM_BITRATE:
+               case DESCR_APPLICATION_SIGNALLING:
+               case DESCR_CAROUSEL_IDENTIFIER:
                   siParseDescriptor (Descriptors, Ptr);
                break;
@@ -701,4 +772,17 @@
             }
          break;
+         
+         case TID_AIT:
+            switch (GetDescriptorTag(Ptr))
+            {
+               case DESCR_MHP_APPLICATION:
+               case DESCR_MHP_APPLICATION_NAME:
+               case DESCR_MHP_TRANSPORT_PROTOCOL:
+               case DESCR_MHP_DVBJ_APPLICATION:
+               case DESCR_MHP_DVBJ_APPLICATION_LOCATION:
+               case DESCR_MHP_APPLICATION_ICONS:
+                  mhpParseDescriptor(Descriptors, Ptr);
+            }
+         break;
 
          default:
@@ -1167,4 +1251,23 @@
          }
       break;
+      
+      case DESCR_APPLICATION_SIGNALLING:
+         CreateApplicationSignallingDescriptor(Descriptor);
+         Length = GetDescriptorLength (Buffer) - DESCR_APPLICATION_SIGNALLING_LEN;
+         Ptr += DESCR_APPLICATION_SIGNALLING_LEN;
+         while (Length > 0) {
+            AddApplicationSignallingEntry(Descriptor,
+                  HILO(CastApplicationSignallingEntry(Ptr)->application_type),
+                  CastApplicationSignallingEntry(Ptr)->AIT_version_number);
+            Length -= APPLICATION_SIGNALLING_ENTRY_LEN;
+            Ptr += APPLICATION_SIGNALLING_ENTRY_LEN;
+         }
+      break;
+      
+      case DESCR_CAROUSEL_IDENTIFIER:
+         CreateCarouselIdentifierDescriptor(Descriptor, 
+                  (HILO(CastCarouselIdentifierDescriptor(Buffer)->carousel_id_hi) << 16 )
+                     |   (HILO(CastCarouselIdentifierDescriptor(Buffer)->carousel_id_lo)) );
+      break;
 
       case DESCR_VIDEO_STREAM:
@@ -1215,4 +1318,134 @@
    return;
 }
+
+
+/* MHP restarts the descriptor tags from 0x00, so they are incompatible with the above function */
+void mhpParseDescriptor (struct LIST *Descriptors, u_char *Buffer)
+{
+   struct NODE     *Descriptor = NULL;
+   char            *Text , *Text2;
+   u_char          *Ptr;
+   int              Length, i;
+
+   if (!Descriptors || !Buffer) return;
+
+   Ptr = Buffer;
+//   fprintf (stderr, "Got descriptor with tag = 0x%X\n", GetDescriptorTag(Buffer));
+
+   switch (GetDescriptorTag(Buffer))
+   {
+      case DESCR_MHP_APPLICATION:
+         CreateApplicationDescriptor(Descriptor, 0, 0, 0); //init later, first come descriptors
+         //Length = GetDescriptorLength (Buffer) - DESCR_APPLICATION_LEN;
+         Length = CastApplicationDescriptor(Buffer)->application_profiles_length;
+         Ptr += DESCR_APPLICATION_LEN;
+         while (Length > 0) {
+            AddApplicationProfileEntry(Descriptor,
+                  HILO(CastApplicationProfileEntry(Ptr)->application_profile),
+                  CastApplicationProfileEntry(Ptr)->version_major,
+                  CastApplicationProfileEntry(Ptr)->version_minor,
+                  CastApplicationProfileEntry(Ptr)->version_micro);
+            Length -= APPLICATION_PROFILE_ENTRY_LEN;
+            Ptr += APPLICATION_PROFILE_ENTRY_LEN;
+         }
+         ((struct ApplicationDescriptor *)Descriptor)->Visibility =   CastApplicationDescriptorEnd(Ptr)->visibility;
+         ((struct ApplicationDescriptor *)Descriptor)->ServiceBound = CastApplicationDescriptorEnd(Ptr)->service_bound_flag;
+         ((struct ApplicationDescriptor *)Descriptor)->Priority =     CastApplicationDescriptorEnd(Ptr)->application_priority;
+         Ptr += DESCR_APPLICATION_END_LEN;
+         Length = GetDescriptorLength(Buffer) - (Ptr-Buffer);
+         while (Length > 0) { 
+            AddTransportProtocolLabel(Descriptor, *Ptr);
+            Ptr++; //adding 8 bit
+            Length--;
+         }
+      break;
+      case DESCR_MHP_APPLICATION_NAME:
+         CreateApplicationNameDescriptor(Descriptor);
+         Length = GetDescriptorLength (Buffer) - DESCR_APPLICATION_NAME_LEN;
+         Ptr += DESCR_APPLICATION_NAME_LEN;
+         while (Length > 0) {
+            Text = siGetDescriptorText (Ptr + APPLICATION_NAME_ENTRY_LEN,
+                   CastApplicationNameDescriptorEntry(Ptr)->application_name_length);
+            AddApplicationName(Descriptor,
+                  CastApplicationNameDescriptorEntry(Buffer)->lang_code1,
+                  CastApplicationNameDescriptorEntry(Buffer)->lang_code2,
+                  CastApplicationNameDescriptorEntry(Buffer)->lang_code3,
+                  Text);
+            Length -= APPLICATION_NAME_ENTRY_LEN + CastApplicationNameDescriptorEntry(Buffer)->application_name_length;
+            Ptr += APPLICATION_NAME_ENTRY_LEN + CastApplicationNameDescriptorEntry(Buffer)->application_name_length;
+         }
+      break;
+      case DESCR_MHP_TRANSPORT_PROTOCOL:
+         switch ( HILO(CastTransportProtocolDescriptor(Buffer)->protocol_id) ) {
+         case 0x01: //MHP Object Carousel
+            CreateTransportProtocolDescriptor(Descriptor, 
+                     0x01, //the protocol_id
+                     CastTransportProtocolDescriptor(Buffer)->transport_protocol_label);
+            Ptr += DESCR_TRANSPORT_PROTOCOL_LEN;
+            struct TransportViaOC *tvo=&((struct TransportProtocolDescriptor*)Descriptor)->Selector.OC;
+            tvo->Remote = CastTransportViaOC(Ptr)->remote;
+            Ptr += TRANSPORT_VIA_OC_LEN;
+            if (tvo->Remote) {
+               tvo->OriginalNetworkID=HILO(CastTransportViaOCRemoteEnd(Ptr)->original_network_id);
+               tvo->TransportStreamID=HILO(CastTransportViaOCRemoteEnd(Ptr)->transport_stream_id);
+               tvo->ServiceID=HILO(CastTransportViaOCRemoteEnd(Ptr)->service_id);
+               tvo->ComponentTag=CastTransportViaOCRemoteEnd(Ptr)->component_tag;
+            } else {
+               tvo->OriginalNetworkID=-1;
+               tvo->TransportStreamID=-1;
+               tvo->ServiceID=-1;
+               tvo->ComponentTag=CastTransportViaOCEnd(Ptr)->component_tag;
+            }
+            break;  
+         case 0x02: //0x0002 IP via DVB multiprotocol encapsulation as defined in EN 301 192, TR 101 202
+         case 0x03: //Transport via HTTP over the interaction channel
+         default:
+            break;
+         }        
+      break;
+      case DESCR_MHP_DVBJ_APPLICATION:
+         CreateDVBJApplicationDescriptor(Descriptor);
+         Length = GetDescriptorLength (Buffer) - DESCR_DVBJ_APPLICATION_LEN;
+         Ptr += DESCR_DVBJ_APPLICATION_LEN;
+         while (Length > 0) {
+            Text = siGetDescriptorText (Ptr + DESCR_DVBJ_APPLICATION_ENTRY_LEN,
+                   CastDVBJApplicationDescriptorEntry(Ptr)->parameter_length);
+            AddApplicationParameter(Descriptor, Text);
+            Ptr += DESCR_DVBJ_APPLICATION_ENTRY_LEN + CastDVBJApplicationDescriptorEntry(Ptr)->parameter_length;
+            Length -= DESCR_DVBJ_APPLICATION_ENTRY_LEN + CastDVBJApplicationDescriptorEntry(Ptr)->parameter_length;
+         }
+      break;
+      case DESCR_MHP_DVBJ_APPLICATION_LOCATION:
+         CreateDVBJApplicationLocationDescriptor(Descriptor);
+         Text = siGetDescriptorText(Ptr + DESCR_DVBJ_APPLICATION_LOCATION_LEN,
+                   CastDVBJApplicationLocationDescriptor(Ptr)->base_directory_length);
+         AddApplicationLocationPath(Descriptor, Text);
+         Ptr += DESCR_DVBJ_APPLICATION_LOCATION_LEN + CastDVBJApplicationLocationDescriptor(Ptr)->base_directory_length;
+         
+         Text = siGetDescriptorText(Ptr + DESCR_DVBJ_APPLICATION_LOCATION_MID_LEN,
+                   CastDVBJApplicationLocationDescriptorMid(Ptr)->classpath_extension_length);
+         AddApplicationLocationPath(Descriptor, Text);
+         Ptr += DESCR_DVBJ_APPLICATION_LOCATION_MID_LEN + CastDVBJApplicationLocationDescriptorMid(Ptr)->classpath_extension_length;
+         
+         Text = siGetDescriptorText(Ptr, GetDescriptorLength(Buffer) - (Ptr - Buffer));
+         AddApplicationLocationPath(Descriptor, Text);
+      break;
+      case DESCR_MHP_APPLICATION_ICONS:
+         Text = siGetDescriptorText(Ptr + DESCR_APPLICATION_ICONS_LEN,
+                   CastApplicationIconsDescriptor(Ptr)->icon_locator_length);
+         Ptr += DESCR_APPLICATION_ICONS_LEN + CastApplicationIconsDescriptor(Ptr)->icon_locator_length;
+         CreateApplicationIconsDescriptor(Descriptor,
+                   HILO(CastApplicationIconsDescriptorEnd(Ptr)->icon_flags),
+                   Text);
+      break;
+      default:
+         //fprintf (stderr, "mhpParseDescriptor: Unsupported descriptor with tag = 0x%02X\n", GetDescriptorTag(Ptr));
+         //siDumpDescriptor (Buffer);
+      break;      
+   }
+   if (Descriptor) xAddTail (Descriptors, Descriptor);
+   return;
+}
+   
 
 
